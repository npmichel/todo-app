pipeline {
    agent any
    
    environment {
        DOCKER_HUB_CREDS = credentials('dockerhub-credentials')
        APP_NAME = 'todo-app'
        IMAGE_NAME = "${DOCKER_HUB_CREDS_USR}/${APP_NAME}"
        IMAGE_TAG = "${env.BUILD_NUMBER}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }
        
        stage('Run Tests') {
            steps {
                // Démarrer les services Docker Compose en arrière-plan
                sh 'docker-compose up -d'
                // Exécuter les tests dans le conteneur app
                sh 'docker-compose exec -T app npm test'
                // Arrêter et supprimer les conteneurs après les tests
                sh 'docker-compose down'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ."
                sh "docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:latest"
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                sh "echo ${DOCKER_HUB_CREDS_PSW} | docker login -u ${DOCKER_HUB_CREDS_USR} --password-stdin"
                sh "docker push ${IMAGE_NAME}:${IMAGE_TAG}"
                sh "docker push ${IMAGE_NAME}:latest"
                sh "docker logout"
            }
        }
        
        stage('Deploy to Kubernetes') {
            environment {
                KUBECONFIG = credentials('kubernetes-config')
            }
            steps {
                sh 'mkdir -p ~/.kube'
                sh 'cat $KUBECONFIG > ~/.kube/config'
                
                sh """
                sed -i 's/\${DOCKER_HUB_USERNAME}/${DOCKER_HUB_CREDS_USR}/g' kubernetes/app/deployment.yaml
                sed -i 's/\${IMAGE_TAG}/${IMAGE_TAG}/g' kubernetes/app/deployment.yaml
                """
                
                sh '''
                kubectl apply -f kubernetes/secrets/db-credentials.yaml
                kubectl apply -f kubernetes/db/pv.yaml
                kubectl apply -f kubernetes/db/pvc.yaml
                kubectl apply -f kubernetes/db/deployment.yaml
                kubectl apply -f kubernetes/db/service.yaml
                kubectl apply -f kubernetes/app/configmap.yaml
                kubectl apply -f kubernetes/app/deployment.yaml
                kubectl apply -f kubernetes/app/service.yaml
                kubectl apply -f kubernetes/app/ingress.yaml
                '''
                
                sh '''
                kubectl rollout status deployment/todo-app
                kubectl rollout status deployment/todo-db
                '''
                
                sh '''
                echo "=== Deployed Resources ==="
                kubectl get pods,svc,ingress
                '''

                sh "docker rmi ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:latest || true"
                sh 'rm -f ~/.kube/config || true'
            }
        }
    }
    
    post {
        always {
            echo "Nettoyage terminé"
        }
        success {
            echo "===== Deployment completed successfully ====="
        }
        failure {
            echo "===== Deployment failed ====="
        }
    }
}